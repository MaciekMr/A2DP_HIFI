
#include "I2SInterface.h"



I2SInterface::I2SInterface()
{
    i2s_handler = {0};
    sound_quality = {
        .sample_rate = 48000,
        .data_width = I2S_DATA_BIT_WIDTH_32BIT,
        .mode = I2S_SLOT_MODE_STEREO
    };
}

I2SInterface::~I2SInterface()
{
    /* Have to stop the channel before deleting it */
    i2s_channel_disable(i2s_handler.tx_handler);
    /* If the handle is not needed any more, delete it to release the channel resources */
    i2s_del_channel(i2s_handler.tx_handler);
}

void I2SInterface::initI2S()
{
    esp_err_t error = ESP_OK;
    /* Setp 1: Determine the I2S channel configuration and allocate two channels one by one
     * The default configuration can be generated by the helper macro,
     * it only requires the I2S controller id and I2S role
     * The tx and rx channels here are registered on different I2S controller,
     * Except ESP32 and ESP32-S2, others allow to register two separate tx & rx channels on a same controller */
    i2s_handler.channel_configuration = I2S_CHANNEL_DEFAULT_CONFIG(I2S_NUM_AUTO, I2S_ROLE_MASTER);
    //Create new channel only for TX, RX -> NULL
    ESP_ERROR_CHECK(error = i2s_new_channel(&i2s_handler.channel_configuration, &i2s_handler.tx_handler, NULL));
    
   

    /* Step 2: Setting the configurations of standard mode and initialize each channels one by one
     * The slot configuration and clock configuration can be generated by the macros
     * These two helper macros is defined in 'i2s_std.h' which can only be used in STD mode.
     * They can help to specify the slot and clock configurations for initialization or re-configuring */
    //i2s_handler.i2s_configuration = {
    
    i2s_handler.i2s_configuration.clk_cfg  = I2S_STD_CLK_DEFAULT_CONFIG(sound_quality.sample_rate);
    i2s_handler.i2s_configuration.slot_cfg = I2S_STD_MSB_SLOT_DEFAULT_CONFIG(sound_quality.data_width, sound_quality.mode);
    
    i2s_handler.i2s_configuration.gpio_cfg.mclk = I2S_GPIO_UNUSED,    // some codecs may require mclk signal, this example doesn't need it
    i2s_handler.i2s_configuration.gpio_cfg.bclk = (gpio_num_t)I2S_CLK_PIN,
    i2s_handler.i2s_configuration.gpio_cfg.ws   = (gpio_num_t)I2S_LRCK_PIN,
    i2s_handler.i2s_configuration.gpio_cfg.dout = (gpio_num_t)I2S_DATA_PIN,
    i2s_handler.i2s_configuration.gpio_cfg.din  = I2S_GPIO_UNUSED,
    i2s_handler.i2s_configuration.gpio_cfg.invert_flags = {
                .mclk_inv = false,
                .bclk_inv = false,
                .ws_inv   = false,
            };
        //};
    //};
    ESP_ERROR_CHECK(error = i2s_channel_init_std_mode(i2s_handler.tx_handler, &i2s_handler.i2s_configuration));

}

void I2SInterface::reconfigI2S()
{
    i2s_channel_disable(tx_chan);
    //i2s_channel_reconfig_std_slot(); //one call for each channel (slot -> channel)
    i2s_channel_enable(tx_chan);

}


void I2SInterface::senddata()
{
    //---- xTaskCreate(i2s_example_write_task, "i2s_example_write_task", 4096, NULL, 5, NULL);
    
    uint8_t *w_buf = (uint8_t *)calloc(1, EXAMPLE_BUFF_SIZE);
    assert(w_buf); // Check if w_buf allocation success

    /* Assign w_buf */
    for (int i = 0; i < EXAMPLE_BUFF_SIZE; i += 8) {
        w_buf[i]     = 0x12;
        w_buf[i + 1] = 0x34;
        w_buf[i + 2] = 0x56;
        w_buf[i + 3] = 0x78;
        w_buf[i + 4] = 0x9A;
        w_buf[i + 5] = 0xBC;
        w_buf[i + 6] = 0xDE;
        w_buf[i + 7] = 0xF0;
    }

    size_t w_bytes = 0;
    while (1) {
        /* Write i2s data */
        if (i2s_channel_write(tx_chan, w_buf, EXAMPLE_BUFF_SIZE, &w_bytes, 1000) == ESP_OK) {
            printf("Write Task: i2s write %d bytes\n", w_bytes);
        } else {
            printf("Write Task: i2s write failed\n");
        }
        vTaskDelay(pdMS_TO_TICKS(200));
    }
    free(w_buf);
    vTaskDelete(NULL);
}


void I2SInterface::init_i2s()
{
    initI2S();
}

esp_err_t I2SInterface::init_i2s_driver()
{
    esp_err_t error;
    if((error = i2s_channel_enable(i2s_handler.tx_handler)) != ESP_OK)
        ESP_LOGE(I2S_TAG, "Enable channel has failed!");
    
    return (error);
}